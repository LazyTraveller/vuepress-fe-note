(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{209:function(t,s,a){"use strict";a.r(s);var v=a(3),e=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"es6-es2015"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-es2015"}},[t._v("#")]),t._v(" es6（es2015）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("类（class）")])]),t._v(" "),a("li",[a("p",[t._v("模块化（module）")])]),t._v(" "),a("li",[a("p",[t._v("箭头函数")])]),t._v(" "),a("li",[a("p",[t._v("函数默认值")])]),t._v(" "),a("li",[a("p",[t._v("模版字符串")])]),t._v(" "),a("li",[a("p",[t._v("解构赋值")])]),t._v(" "),a("li",[a("p",[t._v("延展字符串（...）")])]),t._v(" "),a("li",[a("p",[t._v("对象属性简写")])]),t._v(" "),a("li",[a("p",[t._v("let const")]),t._v(" "),a("p",[t._v("let const 和 var 的对比：")]),t._v(" "),a("ul",[a("li",[t._v("在同一个作用域内，var 可以重复声明变量，let、const 不能重复声明同一个变量。ES5 是函数作用域，即一个函数内就是一个作用域，ES6 是块级作用域，花括号内就是一个作用域。")]),t._v(" "),a("li",[t._v("var 有变量提升，可以在变量声明前使用，let、const 不存在变量提升，在变量前使用会报错")]),t._v(" "),a("li",[t._v("let、const 有暂时性死区，即父作用域中有 var 定义，在块作用域中又定义了 let、const，那再 let、const 之前使用就是死区")]),t._v(" "),a("li",[t._v("const 必须在声明的时候赋值；const 声明的变量不能再修改")])])])]),t._v(" "),a("h1",{attrs:{id:"es7-es2016"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es7-es2016"}},[t._v("#")]),t._v(" es7（es2016）")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Array.prototype.includes()")])]),t._v(" "),a("li",[t._v("指数操作符 ( "),a("code",[t._v("**")]),t._v(" 等价于 Math.pow())")])]),t._v(" "),a("h1",{attrs:{id:"es8-es2017"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es8-es2017"}},[t._v("#")]),t._v(" es8 （es2017）")]),t._v(" "),a("ul",[a("li",[t._v("async/await")]),t._v(" "),a("li",[t._v("Object.values")]),t._v(" "),a("li",[t._v("Object.entries")]),t._v(" "),a("li",[t._v("String padding\n"),a("ul",[a("li",[t._v("String.prototype.padStart")]),t._v(" "),a("li",[t._v("String.prototype.padEnd")])])]),t._v(" "),a("li",[t._v("函数参数列表结尾允许逗号")]),t._v(" "),a("li",[t._v("Object.getOwnPropertyDescriptors")]),t._v(" "),a("li",[t._v("SharedArrayBuffer 对象")]),t._v(" "),a("li",[t._v("Atomics 对象")])]),t._v(" "),a("h1",{attrs:{id:"es9-es2018"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es9-es2018"}},[t._v("#")]),t._v(" es9（es2018）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("异步迭代（await for of）")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Promise.finally()")])]),t._v(" "),a("li",[a("p",[t._v("rest/spread 属性")]),t._v(" "),a("p",[t._v("ES6 引入了 rest 参数和扩展运算符，三个点仅用于数组。rest 参数语法允许我们讲一个不定数量的参数表示为一个数组")])]),t._v(" "),a("li",[a("p",[t._v("正则表达式命名捕获组")])]),t._v(" "),a("li",[a("p",[t._v("正则表达式反向断言")])]),t._v(" "),a("li",[a("p",[t._v("正则表达式 dotAll 模式")])]),t._v(" "),a("li",[a("p",[t._v("正则表达式 Unicode 转译")])]),t._v(" "),a("li",[a("p",[t._v("非转译序列的模版字符串")])])]),t._v(" "),a("h1",{attrs:{id:"es10-es2019"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es10-es2019"}},[t._v("#")]),t._v(" es10（es2019）")]),t._v(" "),a("ul",[a("li",[t._v("行分隔符、段分隔符")]),t._v(" "),a("li",[t._v("更有好的 JSON.stringify()")]),t._v(" "),a("li",[t._v("新增了 Array 的 flat() 和 flatMap()")]),t._v(" "),a("li",[t._v("新增了 String 的 trimStart() 和 trimEnd()")]),t._v(" "),a("li",[t._v("Object.fromEntries()")]),t._v(" "),a("li",[t._v("Symbol.prototype.description")]),t._v(" "),a("li",[t._v("Symbol.prototype.matchAll")]),t._v(" "),a("li",[t._v("Function.prototype.toString 现在返回精确字符串，包括空格和注释")]),t._v(" "),a("li",[t._v("简化 "),a("code",[t._v("try {} catch {}")]),t._v("，修改 catch 绑定")]),t._v(" "),a("li",[t._v("Legacy RegEx")]),t._v(" "),a("li",[t._v("私有的实例方法和访问器")])]),t._v(" "),a("h1",{attrs:{id:"es11-es2020"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es11-es2020"}},[t._v("#")]),t._v(" es11（es2020）")]),t._v(" "),a("ul",[a("li",[t._v("可选调用链")]),t._v(" "),a("li",[t._v("空值合并")]),t._v(" "),a("li",[t._v("Promise.allSettled")]),t._v(" "),a("li",[t._v("String.prototype.matchAll")]),t._v(" "),a("li",[t._v("Dynamic import（动态导入）")]),t._v(" "),a("li",[t._v("新的基本数据类型 BigInt")]),t._v(" "),a("li",[t._v("globalThis")])])])}),[],!1,null,null,null);s.default=e.exports}}]);